from collections.abc import Callable
from typing import Any, Protocol, runtime_checkable

@runtime_checkable
class SettingProtocol(Protocol):
    def value(self, key: str, default: Any = None) -> Any: ...
    def setValue(self, key: str, value: Any): ...
    def sync(self): ...

type _Decorator[_BaseFun: Callable] = Callable[[_BaseFun], _BaseFun]

def saveGeometryDecFac(*, key: str, settings: SettingProtocol) -> _Decorator: ...
def loadGeometryDecFac(*, key: str, settings: SettingProtocol) -> _Decorator: ...
def saveStateDecFac(*, key: str, settings: SettingProtocol) -> _Decorator: ...
def loadStateDecFac(*, key: str, settings: SettingProtocol) -> _Decorator: ...
