import logging
from collections.abc import Callable

type _Decorator[_BaseFun: Callable] = Callable[[_BaseFun], _BaseFun]

def decoratorForSlot(decoratorFun: _Decorator) -> _Decorator: ...
def lessArgDec(fun): ...
def exceptionDecFactory(
    *, logger: logging.Logger | None = None, level: int = ...
) -> _Decorator: ...
def entryExitDecFactory(*, logger: logging.Logger | None = None) -> _Decorator: ...
def timeDecFactory(*, logger: logging.Logger | None = None) -> _Decorator: ...
def cursorDecFactory(*, cursor=...) -> _Decorator: ...
def singleCallDecFactory(
    *, attrName: str = '__is_calling__', callingDefaultValue=None
) -> _Decorator: ...
