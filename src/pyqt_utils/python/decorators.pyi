import logging
from collections.abc import Callable

type _Decorator[_BaseFun: Callable] = Callable[[_BaseFun], _BaseFun]

def decoratorForSlot(decoratorFun: _Decorator) -> _Decorator: ...
def lessArgDec(fun): ...
def exceptionDec(*, logger: logging.Logger | None = None, level=...) -> _Decorator: ...
def entryExitDec(*, logger: logging.Logger | None = None) -> _Decorator: ...
def timeDec(*, logger: logging.Logger | None = None) -> _Decorator: ...
def cursorDec(*, cursor=...) -> _Decorator: ...
def singleCallDec(
    *, attrName='__is_calling__', callingDefaultValue=None
) -> _Decorator: ...
